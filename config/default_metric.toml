# this file records default metrics in yhc, you'd better not modify this file, if you want to add some custom metrics, you should write it in 'custom_metric.toml'
# you cannot modify some fields of default metric, especially 'name' and 'default'.
# if necessary, you can modify fields like column_alias to control the generated results of word and html.
# please refer to the product documentation to learn how to modify the default metrics.
[[metrics]]
  name = "host_info"
  name_alias = "主机信息"
  metric_type = "bash"
  module_name = "overview"
  default = true
  enabled = true
  column_order = ["hostname", "os", "kernelArch", "kernelVersion", "platform", "platformFamily", "platformVersion", "bootTime", "uptime", "procs"]
  [metrics.column_alias]
    hostname = "主机名称"
    bootTime = "开机时间"
    os = "操作系统名称"
    platform = "操作系统标识符"
    platformFamily = "操作系统家族"
    platformVersion = "操作系统版本号"
    kernelVersion = "内核版本号"
    kernelArch = "内核架构"
    uptime = "运行时间"
    procs = "进程数"


[[metrics]]
  name = "host_firewalld"
  name_alias = "防火墙状态"
  metric_type = "bash"
  module_name = "overview"
  default = true
  enabled = true
  [metrics.column_alias]
    firewalldStatus = "防火墙是否开启"

[[metrics]]
  name = "host_iptables"
  name_alias = "端口打开情况"
  metric_type = "bash"
  module_name = "overview"
  default = true
  enabled = true


[[metrics]]
  name = "host_cpu_info"
  name_alias = "CPU信息"
  module_name = "overview"
  metric_type = "bash"
  default = true
  enabled = true
  column_order = ["modelName", "vendorId", "GHz", "physicalCores", "logicalCores"]
  [metrics.column_alias]
    vendorId = "CPU厂商标识符"
    modelName = "CPU型号名称"
    GHz = "CPU主频"
    flags = "CPU特性标识列表"
    physicalCores = "CPU物理核心数"
    logicalCores = "CPU逻辑核心数"


[[metrics]]
  name = "host_disk_info"
  name_alias = "磁盘信息"
  module_name = "overview"
  metric_type = "bash"
  default = true
  enabled = true
  column_order = ["device","path","fstype","mountOptions","total","free","used","usedPercent","inodesTotal","inodesFree","inodesUsed","inodesUsedPercent"]
  [metrics.column_alias]
    device = "设备名称"
    mountOptions = "挂载选项"
    path = "挂载路径"
    fstype = "文件系统"
    total = "总空间"
    free = "空闲空间"
    used = "已使用空间"
    usedPercent = "磁盘空间使用率"
    inodesTotal = "i节点总数"
    inodesUsed = "已使用i节点数量"
    inodesFree = "空闲i节点数量"
    inodesUsedPercent = "i节点使用率"


[[metrics]]
  name = "host_disk_block_info"
  name_alias = "磁盘块设备信息"
  module_name = "overview"
  metric_type = "bash"
  default = true
  enabled = true
  column_order = ["name", "kname", "mountpoint", "uuid", "pkname", "fstype", "type", "size", "rota", "model"]
  [metrics.column_alias]
    name = "名称"
    kname = "内核名称"
    pkname = "父设备名称"
    model = "型号"
    type = "类型"
    mountpoint = "挂载点"
    uuid = "UUID"
    size = "大小"
    rota = "是否旋转介质"
    fstype = "文件系统类型"



[[metrics]]
  name = "host_bios_info"
  name_alias = "BIOS信息"
  module_name = "overview"
  metric_type = "bash"
  default = true
  enabled = true


[[metrics]]
  name = "host_memory_info"
  name_alias = "内存信息"
  module_name = "overview"
  metric_type = "bash"
  default = true
  enabled = true
  column_order = ["type", "total", "used", "available", "free", "shared", "buffers_cached"]
  [metrics.column_alias]
    type = "类型"
    total = "内存大小"
    used = "已使用"
    free = "空闲"
    shared = "共享内存"
    buffers_cached = "缓冲/缓存"
    available = "可用"


[[metrics]]
  name = "host_network_info"
  name_alias = "网卡信息"
  module_name = "overview"
  metric_type = "bash"
  default = true
  enabled = true
  column_order = ["name","ipv4","ipv6","hardwareAddr","mtu","flags"]
  [metrics.column_alias]
    name = "网络接口"
    mtu = "最大传输单元(MTU)"
    hardwareAddr = "MAC地址"
    ipv4 = "IPV4地址"
    ipv6 = "IPV6地址"
    flags = "标志位"


[[metrics]]
  name = "yasdb_instance"
  name_alias = "实例信息"
  module_name = "overview"
  metric_type = "sql"
  default = true
  enabled = true
  sql = "select status as instance_status, version, startup_time from v$instance;"
  [metrics.column_alias]
    INSTANCE_STATUS = "数据库实例状态"
    STARTUP_TIME = "数据库实例启动时间"
    VERSION = "数据库版本"
  [metrics.item_names]
    INSTANCE_STATUS = "instance_status"
  [metrics.alert_rules]

    [[metrics.alert_rules.critical]]
      expression = "instance_status != 'OPEN'"
      description = "实例状态异常"
      suggestion = "建议检查实例状态"


[[metrics]]
  name = "yasdb_deployment_architecture"
  name_alias = "数据库部署形态"
  module_name = "overview"
  metric_type = "sql"
  default = true
  enabled = true
  [metrics.column_alias]
    NODE_NUM = "部署形态"


[[metrics]]
  name = "yasdb_database"
  name_alias = "数据库信息"
  module_name = "overview"
  metric_type = "sql"
  default = true
  enabled = true
  sql = "select database_name, status as database_status, log_mode, open_mode, database_role, protection_mode, protection_level, create_time from v$database;"
  [metrics.column_alias]
    CREATE_TIME = "数据库创建时间"
    DATABASE_NAME = "数据库名称"
    DATABASE_STATUS = "数据库状态"
    DATABASE_ROLE = "数据库主备角色"
    LOG_MODE = "数据库归档模式"
    OPEN_MODE = "数据库打开模式"
    PROTECTION_LEVEL = "保护级别"
    PROTECTION_MODE = "保护模式"
  [metrics.item_names]
    DATABASE_STATUS = "database_status"
    OPEN_MODE = "open_mode"
    LOG_MODE = "log_mode"
    PROTECTION_MODE = "protection_mode"
    PROTECTION_LEVEL = "protection_level"
    DATABASE_ROLE = "database_role"
  [metrics.alert_rules]

    [[metrics.alert_rules.critical]]
      expression = "database_status != 'NORMAL'"
      description = "数据库状态异常"
      suggestion = "建议检查数据库状态"

    [[metrics.alert_rules.critical]]
      expression = "log_mode != 'ARCHIVELOG'"
      description = "数据库归档模式未开启"
      suggestion = "建议开启数据库归档模式"

    [[metrics.alert_rules.critical]]
      expression = "protection_mode != protection_level"
      description = "数据库保护级别与保护模式不一致"
      suggestion = "建议检查数据库保护级别和保护模式"

    [[metrics.alert_rules.critical]]
      expression = "database_role == 'PRIMARY' && open_mode != 'READ_WRITE'"
      description = "主库打开模式非READ_WRITE"
      suggestion = "建议检查数据库开启模式"

    [[metrics.alert_rules.critical]]
      expression = "database_role == 'STANDBY' && open_mode != 'READ_ONLY'"
      description = "备库打开模式非READ_ONLY"
      suggestion = "建议检查数据库开启模式"


[[metrics]]
  name = "yasdb_file_permission"
  name_alias = "数据库文件权限"
  module_name = "overview"
  default = true
  enabled = true
  labels = ["filePath"]
  column_order = ["filePath","owner","group","permission"]
  [metrics.column_alias]
    filePath = "文件路径"
    permission = "文件权限"
    owner = "所有者"
    group = "所有组"
  [metrics.item_names]
    permission = "file_permission"
  [metrics.alert_rules]

    [[metrics.alert_rules.warning]]
      expression = "file_permission ~='^(.{8}w).'"
      description = "数据库文件及目录权限要求过低"
      suggestion = "建议调整数据库文件和目录权限，如果文件读写权限过低，存在文件被其他用户误删的风险"

    [[metrics.alert_rules.warning]]
      expression = "file_permission ~='^.{,9}|.{11,}$'"
      description = "数据库文件及目录权限检查失败"
      suggestion = "建议根据提示信息查看是否有权限访问该文件或目录"


[[metrics]]
  name = "yasdb_listen_address"
  name_alias = "数据库IP及端口"
  module_name = "overview"
  metric_type = "sql"
  default = true
  enabled = true
  sql = "select VALUE as LISTEN_ADDR from v$parameter where name = 'LISTEN_ADDR';"
  [metrics.column_alias]
    LISTEN_ADDR = "数据库IP及端口"


[[metrics]]
  name = "host_history_cpu_usage"
  name_alias = "CPU历史使用情况"
  module_name = "host_check"
  default = true
  enabled = true
  [metrics.column_alias]
    idle = "空闲时间(%)"
    user = "用户进程时间(%)"
    system = "系统进程时间(%)"
    iowait = "等待I/O时间(%)"
    nice = "低优先级用户进程时间(%)"
    steal = "发生CPU窃取时间(%)"



[[metrics]]
  name = "host_current_cpu_usage"
  name_alias = "CPU当前使用情况"
  module_name = "host_check"
  default = true
  enabled = true
  [metrics.column_alias]
    idle = "空闲时间(%)"
    user = "用户进程时间(%)"
    system = "系统进程时间(%)"
    iowait = "等待I/O时间(%)"
    nice = "低优先级用户进程时间(%)"
    steal = "发生CPU窃取时间(%)"


[[metrics]]
  name = "host_history_disk_io"
  name_alias = "磁盘历史IO情况"
  module_name = "host_check"
  default = true
  enabled = true
  [metrics.column_alias]
    tps = "历史tps"
    rdSec = "历史每秒读取数据量"
    wrSec = "历史每秒写入数据量" 


[[metrics]]
  name = "host_current_disk_io"
  name_alias = "磁盘当前IO情况"
  module_name = "host_check"
  default = true
  enabled = true
  [metrics.column_alias]
    tps = "当前tps"
    rdSec = "当前每秒读取数据量"
    wrSec = "当前每秒写入数据量" 


[[metrics]]
  name = "host_history_memory_usage"
  name_alias = "内存历史使用情况"
  module_name = "host_check"
  default = true
  enabled = true
  [metrics.column_alias]
    realMemUsed = "历史内存使用率"
    used = "已使用内存"


[[metrics]]
  name = "host_current_memory_usage"
  name_alias = "内存当前使用情况"
  module_name = "host_check"
  default = true
  enabled = true
  [metrics.column_alias]
    realMemUsed = "当前内存使用率"
    used = "已使用内存"


[[metrics]]
  name = "host_history_network_io"
  name_alias = "网卡历史IO情况"
  module_name = "host_check"
  default = true
  enabled = true
  [metrics.column_alias]
    rxkB = "历史每秒接收数据量"
    txkB = "历史每秒发送数据量"


[[metrics]]
  name = "host_current_network_io"
  name_alias = "网卡当前IO情况"
  module_name = "host_check"
  default = true
  enabled = true
  [metrics.column_alias]
    rxkB = "当前每秒接收数据量"
    txkB = "当前每秒发送数据量"


[[metrics]]
  name = "yasdb_replication_status"
  name_alias = "数据库主备连接状态"
  module_name = "yasdb_check"
  metric_type = "sql"
  default = true
  enabled = true
  sql = "select connection, status, peer_role, peer_addr, transport_lag, apply_lag from v$replication_status;"
  [metrics.column_alias]
    CONNECTION = "主备连接状态"
    STATUS = "日志同步状态"
    PEER_ROLE = "对端数据库角色"
    PEER_ADDR = "对端数据库地址"
    TRANSPORT_LAG = "日志传输时延"
    APPLY_LAG = "日志回放时延"

  [metrics.item_names]
    CONNECTED = "replication_connected"
    TRANSPORT_LAG = "replication_transport_lag"
    APPLY_LAG = "replication_apply_lag"
  [metrics.alert_rules]

    [[metrics.alert_rules.critical]]
      expression = "database_role == 'SATNDBY' && replication_connected != 'CONNECTED'"
      description = "数据库主备连接状态"
      suggestion = "主备连接已断开，请检查高可用架构是否正常"
    [[metrics.alert_rules.critical]]
      expression = "database_role == 'SATNDBY' && replication_transport_lag > '0'"
      description = "数据库备库应用日志存在延迟"
      suggestion = "请检查业务活动强度与当前网络传输速度"

    [[metrics.alert_rules.critical]]
      expression = "database_role == 'SATNDBY' && replication_apply_lag > '0'"
      description = "数据库备库应用日志存在延迟"
      suggestion = "请检查业务活动强度与当前网络传输速度"


[[metrics]]
  name = "yasdb_os_auth"
  name_alias = "OS认证用户"
  module_name = "yasdb_check"
  default = true
  enabled = true
  [metrics.column_alias]
    ENABLE_LOCAL_OSAUTH = "操作系统身份认证开关"
    YASDBA_GROUP_USER = "YASDBA组中用户"
  [metrics.item_names]
    ENABLE_LOCAL_OSAUTH="enable_local_osauth"
  [metrics.alert_rules]

    [[metrics.alert_rules.info]]
      expression = "enable_local_osauth == 'off'"
      description = "未设置OS认证用户"
      suggestion = "建议设置OS认证用户"


[[metrics]]
  name = "yasdb_parameter"
  name_alias = "数据库参数检查"
  module_name = "yasdb_check"
  metric_type = "sql"
  default = true
  enabled = true
  sql = "select name, value from v$parameter where value is not null;" # 不要修改已有列名，可以新增列以及修改where条件
  [metrics.item_names]
    RECYCLEBIN_ENABLED = "parameter_recyclebin_enabled"
    ARCH_CLEAN_IGNORE_MODE = "parameter_clean_ignore_mode"
    UNIFIED_AUDITING = "parameter_unified_auditing"
  [metrics.alert_rules]

    [[metrics.alert_rules.info]]
      expression = "parameter_recyclebin_enabled == 'OFF'"
      description = "数据库回收站已关闭"
      suggestion = "数据库默认关闭回收站功能，关闭时无法使用闪回truncate和闪回drop。建议开启此功能"

    [[metrics.alert_rules.info]]
      expression = "parameter_clean_ignore_mode != 'NONE'"
      description = "归档清理设置非NONE"
      suggestion = "归档清理设置为NONE时，需评估是否影响备份恢复，设置为NONE可能会因为归档日志被清理而无法恢复到最新状态。但是设置为NONE后，可以不受限制进行归档清理，可以避免因归档目录满导致数据库挂起"

    [[metrics.alert_rules.info]]
      expression = "parameter_unified_auditing != 'TRUE'"
      description = "数据库未开启审计"
      suggestion = "审计开关未打开，此时无法进行数据库审计"


[[metrics]]
  name = "yasdb_tablespace"
  name_alias = "表空间"
  module_name = "yasdb_check"
  metric_type = "sql"
  default = true
  enabled = true
  column_order = ["TABLESPACE_NAME", "CONTENTS", "STATUS", "ALLOCATION_TYPE", "USED_BYTES", "TOTAL_BYTES", "USED_RATE", "DATA_PERCENTAGE"]
  number_columns = ["USED_RATE","USED_BYTES","TOTAL_BYTES"]
  labels = ["TABLESPACE_NAME"]
  sql = "SELECT TABLESPACE_NAME, CONTENTS, STATUS, ALLOCATION_TYPE, TOTAL_BYTES - USER_BYTES AS USED_BYTES, TOTAL_BYTES, (TOTAL_BYTES - USER_BYTES) / TOTAL_BYTES * 100 AS USED_RATE FROM SYS.DBA_TABLESPACES;"
  [metrics.column_alias]
    TABLESPACE_NAME = "表空间名称"
    CONTENTS = "表空间类型"
    STATUS = "表空间状态"
    ALLOCATION_TYPE = "EXTEND分配方式"
    USED_BYTES = "已使用字节数"
    TOTAL_BYTES = "总字节数"
    USED_RATE = "使用率(%)"
    DATA_PERCENTAGE = "数据段使用占比"
  [metrics.item_names]
    STATUS = "tablespace_status"
    ALLOCATION_TYPE = "allocation_type"
    USED_RATE = "tablespace_used_rate"
  [metrics.alert_rules]

    [[metrics.alert_rules.warning]]
      expression = "tablespace_status != 'ONLINE'"
      description = "表空间状态检查"
      suggestion = "表空间状态不正常，建议检查表空间状态，确认异常原因"

    [[metrics.alert_rules.warning]]
      expression = "allocation_type == 'AUTO'"
      description = "表空间开启自动扩展"
      suggestion = "建议关闭此功能，避免有事务占用过多的UNDO导致磁盘空间不可用"

    [[metrics.alert_rules.warning]]
      expression = "tablespace_used_rate >= 80 && tablespace_used_rate < 90"
      description = "表空间使用率"
      suggestion = "表空间使用率过高，建议检查表空间使用情况并通过清理空间或者增加数据文件的方法降低表空间使用率，表空间完全满之后可能导致业务挂起或者数据库挂起"

    [[metrics.alert_rules.critical]]
      expression = "tablespace_used_rate >= 90"
      description = "表空间使用率"
      suggestion = "表空间使用率过高，建议检查表空间使用情况并通过清理空间或者增加数据文件的方法降低表空间使用率，表空间完全满之后可能导致业务挂起或者数据库挂起"


[[metrics]]
  name = "yasdb_datafile"
  name_alias = "数据文件"
  module_name = "yasdb_check"
  metric_type = "sql"
  default = true
  enabled = true
  labels = ["FILE_NAME"]
  sql = "SELECT FILE_NAME, FILE_ID, TABLESPACE_NAME, STATUS, AUTO_EXTEND FROM DBA_DATA_FILES;"
  number_columns = [""]
  column_order = ["FILE_NAME","FILE_ID","TABLESPACE_NAME","STATUS","AUTO_EXTEND","FILE_PERMISSION"]
  [metrics.column_alias]
    FILE_NAME = "数据文件名称"
    FILE_ID = "ID"
    TABLESPACE_NAME = "表空间名称"
    STATUS = "文件状态"
    AUTO_EXTEND = "自动拓展"
    FILE_PERMISSION = "文件权限"
  [metrics.item_names]
    STATUS = "datafile_status"
    AUTO_EXTEND = "datafile_auto_extend"
    FILE_PERMISSION = "datafile_file_permission"
  [metrics.alert_rules]

    [[metrics.alert_rules.warning]]
      expression = "datafile_status != 'ONLINE'"
      description = "数据文件状态检查"
      suggestion = "数据文件状态异常（非online的具体状态），请检查数据文件状态异常原因"

    [[metrics.alert_rules.warning]]
      expression = "datafile_auto_extend != 'ON'"
      description = "数据文件未开启自动扩展"
      suggestion = "建议开启数据文件自动拓展功能"


[[metrics]]
  name = "yasdb_controlfile"
  name_alias = "控制文件"
  module_name = "yasdb_check"
  metric_type = "sql"
  default = true
  enabled = true
  number_columns = ['MBYTES']
  sql = "select id, name, bytes/1024/1024 as MBYTES from v$controlfile;"
  column_order = ["NAME","ID","MBYTES"]
  [metrics.column_alias]
    ID = "ID"
    NAME = "名称"
    MBYTES = "大小(MB)"
  [metrics.item_names]
    MBYTES = "controlfile_mbytes"
  [metrics.alert_rules]

    [[metrics.alert_rules.info]]
      expression = "controlfile_mbytes >= 50 && controlfile_mbytes < 100"
      description = "控制文件大小检查"
      suggestion = "控制文件过大可能会影响数据库性能"

    [[metrics.alert_rules.warning]]
      expression = "controlfile_mbytes >= 100"
      description = "控制文件大小检查"
      suggestion = "控制文件过大可能会影响数据库性能"


[[metrics]]
  name = "yasdb_controlfile_count"
  name_alias = "控制文件数量"
  module_name = "yasdb_check"
  metric_type = "sql"
  default = true
  enabled = true
  number_columns = ["TOTAL"]
  sql = "select count(*) as total from v$controlfile;"
  [metrics.column_alias]
    TOTAL = "控制文件总数"
  [metrics.item_names]
    TOTAL = "controlfile_total"
  [metrics.alert_rules]

    [[metrics.alert_rules.warning]]
      expression = "controlfile_total <= 1"
      description = "控制文件数量检查"
      suggestion = "控制文件数量较少，可能存在单点故障风险"


[[metrics]]
  name = "yasdb_backup_set"
  name_alias = "备份记录"
  module_name = "yasdb_check"
  metric_type = "sql"
  default = true
  enabled = true
  sql = "select RECID# as RECID, START_TIME, TYPE, decode(COMPLETION_TIME > sysdate, FALSE, TRUE) as SUCCESS from dba_backup_set;"
  column_order = ["RECID","START_TIME","TYPE","SUCCESS"]
  [metrics.column_alias]
    RECID = "备份集编号"
    START_TIME = "开始时间"
    TYPE = "备份类型"
    SUCCESS = "备份完成"

[[metrics]]
  name = "yasdb_full_backup_set_count"
  name_alias = "近十天完成的全量备份"
  module_name = "yasdb_check"
  metric_type = "sql"
  default = true
  enabled = true
  number_columns = ["TOTAL"]
  sql = "select count(*) as TOTAL from dba_backup_set where date_add(COMPLETION_TIME , INTERVAL 10 DAY) >= sysdate AND type = 'FULL';"
  [metrics.column_alias]
    TOTAL = "备份数量"
  [metrics.item_names]
    TOTAL = "recent_full_backup_set_count"

  [metrics.alert_rules]
    [[metrics.alert_rules.warning]]
      expression = "recent_full_backup_set_count == 0"
      description = "近十天没有完成全量备份"
      suggestion = "建议定期执行全量备份"

[[metrics]]
  name = "yasdb_backup_set_path"
  name_alias = "本地备份集路径"
  module_name = "yasdb_check"
  default = true
  enabled = true
  labels = ["PATH"]
  column_order = ["PATH", "EXIST"]
  [metrics.column_alias]
    PATH = "备份集文件"
    EXIST = "是否存在"

  [metrics.item_names]
    EXIST = "yasdb_backup_set_path_exist"

  [metrics.alert_rules]
    [[metrics.alert_rules.warning]]
      expression = "yasdb_backup_set_path_exist == 'FALSE'"
      description = "备份集文件不存在或者检查用户无权限访问"
      suggestion = "建议检查备份文件，必要时重新备份"

[[metrics]]
  name = "yasdb_session"
  name_alias = "会话数检查"
  module_name = "yasdb_check"
  default = true
  enabled = true
  number_columns = ["SESSION_USAGE"]
  column_order = ["BACKGROUND_SESSIONS","USER_SESSIONS","MAX_SESSIONS","SESSION_USAGE"]
  [metrics.column_alias]
    USER_SESSIONS = "用户会话数"
    BACKGROUND_SESSIONS = "系统会话数"
    TOTAL_SESSIONS = "总会话数"
    MAX_SESSIONS = "最大会话数"
    SESSION_USAGE = "会话使用率(%)"
  [metrics.item_names]
    SESSION_USAGE = "session_session_usage"
  [metrics.alert_rules]

    [[metrics.alert_rules.warning]]
      expression = "session_session_usage >= 70 && session_session_usage < 80"
      description = "当前会话占用率"
      suggestion = "会话使用率过高。请检查原因"

    [[metrics.alert_rules.critical]]
      expression = "session_session_usage >= 80"
      description = "当前会话占用率"
      suggestion = "会话使用率过高。请检查原因"


[[metrics]]
  name = "yasdb_share_pool"
  name_alias = "共享池信息"
  module_name = "yasdb_check"
  default = true
  enabled = true
  [metrics.column_alias]
    TOTAL_SIZE = "总大小"
    FREE_SIZE = "空闲大小"
    USED_SIZE = "已使用大小"
    USED_PERCENTAGE = "共享池使用率"

[[metrics]]
  name = "yasdb_vm_swap_rate"
  name_alias = "VM转换率"
  module_name = "yasdb_check"
  default = true
  enabled = true
  sql = "SELECT t1.SWAPPED_OUT_BLOCKS / t2.value AS RATE FROM ( SELECT SWAPPED_OUT_BLOCKS FROM v$vm ) t1, ( SELECT value FROM V$SYSSTAT WHERE NAME = 'VM ALLOC' ) t2;"
  [metrics.column_alias]
    RATE = "转换率"

[[metrics]]
  name = "yasdb_wait_event"
  name_alias = "等待事件"
  module_name = "yasdb_check"
  default = true
  enabled = true
  column_order = ["EVENT","WAIT_CLASS","TOTAL_WAIT","AVG_WAIT","WAIT","DB_TIME"]
  [metrics.column_alias]
    EVENT = "等待事件名称"
    WAIT_CLASS = "等待事件类别"
    TOTAL_WAIT = "总等待时间(s)"
    AVG_WAIT = "平均等待时间(ms)"
    WAITS = "等待次数"
    DB_TIME = "DB Time"


[[metrics]]
  name = "yasdb_high_frequency_sql"
  name_alias = "高频SQL"
  module_name = "yasdb_check"
  default = true
  enabled = true
  sql = "select SQL_ID, SQL_TEXT, PLSQL_EXEC_TIME, EXECUTIONS from v$sql where EXECUTIONS >= 10000;"
  column_order = ["SQL_ID", "PLSQL_EXEC_TIME", "EXECUTIONS", "SQL_TEXT"]
  [metrics.column_alias]
    PLSQL_EXEC_TIME = "PL / SQL执行时间（单位毫秒）"
    EXECUTIONS = "执行次数"

[[metrics]]
  name = "yasdb_history_db_time"
  name_alias = "数据库历史负载"
  module_name = "yasdb_check"
  default = true
  enabled = true
  [metrics.column_alias]
    DB_TIMES = "DB Time(ms)"

[[metrics]]
  name = "yasdb_history_buffer_hit_rate"
  name_alias = "历史内存命中率"
  module_name = "yasdb_check"
  default = true
  enabled = true
  [metrics.column_alias]
    HIT_RATE = "历史内存命中率(%)"

[[metrics]]
  name = "yasdb_buffer_hit_rate"
  name_alias = "内存池命中率"
  module_name = "yasdb_check"
  default = true
  enabled = true
  sql = "select (sum(decode(NAME, 'BUFFER GETS', VALUE, 0)) + sum(decode(NAME, 'BUFFER CR GETS', VALUE, 0)) - sum(decode(NAME, 'DISK READS', VALUE, 0))) / (sum(decode(NAME, 'BUFFER GETS', VALUE, 0)) + sum(decode(NAME, 'BUFFER CR GETS', VALUE, 0))) * 100 AS HIT_RATE FROM v$sysstat;"
  number_columns = ["HIT_RATE"]
  [metrics.column_alias]
    HIT_RATE = "当前命中率（%）"

  [metrics.item_names]
    HIT_RATE = "buffer_hit_rate"

  [metrics.alert_rules]

    [[metrics.alert_rules.warning]]
      expression = "buffer_hit_rate < 80"
      description = "内存池命中率"
      suggestion = "内存池命中率过低，请检查原因"

[[metrics]]
  name = "yasdb_top_sql_by_cpu_time"
  name_alias = "平均耗时 TOP10 SQL"
  module_name = "yasdb_check"
  default = true
  enabled = true
  sql = '''SELECT round(CPU_TIME / 1000, 2) AS CPU_TIME, EXECUTIONS
        , round(ELAPSED_TIME / 1000, 2) AS ALL_ELAPSED_TIME
        , round(ELAPSED_TIME / 1000 / EXECUTIONS, 2) AS AVG_TIME
        , to_char(LAST_ACTIVE_TIME, 'YYYY-MM-DD HH24:MI:SS') AS LAST_TIME, SQL_ID
        , SQL_TEXT
    FROM v$sqlarea
    WHERE EXECUTIONS > 0
    ORDER BY round(ELAPSED_TIME / 1000 / EXECUTIONS, 2) DESC
    LIMIT 10;'''
  column_order = ["CPU_TIME","EXECUTIONS","ALL_ELAPSED_TIME","AVG_TIME","LAST_TIME","SQL_ID","SQL_TEXT"]
  [metrics.column_alias]
    CPU_TIME = "CPU时间（s）"
    EXECUTIONS = "执行次数"
    ALL_ELAPSED_TIME = "总耗时（s）"
    AVG_TIME = "平均耗时（s）"
    LAST_TIME= "上次执行时间"
    SQL_ID = "SQL ID"
    SQL_TEXT = "SQL文本的前1000个字符"

[[metrics]]
  name = "yasdb_top_sql_by_buffer_gets"
  name_alias = "从缓存区获取Buffer次数 TOP10 SQL"
  module_name = "yasdb_check"
  default = true
  enabled = true
  sql = '''SELECT BUFFER_GETS, EXECUTIONS
        , round(BUFFER_GETS / EXECUTIONS, 2) AS GETS_PER_EXEC
        , round(ELAPSED_TIME / 1000, 2) AS ALL_ELAPSED_TIME
        , to_char(LAST_ACTIVE_TIME, 'YYYY-MM-DD HH24:MI:SS') AS LAST_TIME, SQL_ID
        , SQL_TEXT
    FROM v$sqlarea
    WHERE EXECUTIONS > 0
    ORDER BY BUFFER_GETS DESC
    LIMIT 10;'''
  column_order = ["BUFFER_GETS","EXECUTIONS","GETS_PER_EXEC","ALL_ELAPSED_TIME","LAST_TIME","SQL_ID","SQL_TEXT"]
  [metrics.column_alias]
    BUFFER_GETS = "从缓存区获取Buffer的次数"
    EXECUTIONS = "执行次数"
    GETS_PER_EXEC = "平均每次执行从缓存区获取Buffer的次数"
    ALL_ELAPSED_TIME = "总耗时（s）"
    LAST_TIME= "上次执行时间"
    SQL_ID = "SQL ID"
    SQL_TEXT = "SQL文本的前1000个字符"


[[metrics]]
  name = "yasdb_top_sql_by_disk_reads"
  name_alias = "磁盘读取次数 TOP10 SQL"
  module_name = "yasdb_check"
  default = true
  enabled = true
  sql = '''SELECT DISK_READS, EXECUTIONS
        , round(DISK_READS / EXECUTIONS, 2) AS READS_PER_EXEC
        , round(ELAPSED_TIME / 1000, 2) AS ALL_ELAPSED_TIME
        , to_char(LAST_ACTIVE_TIME, 'YYYY-MM-DD HH24:MI:SS') AS LAST_TIME, SQL_ID
        , SQL_TEXT
    FROM v$sqlarea
    WHERE EXECUTIONS > 0
    ORDER BY DISK_READS DESC
    LIMIT 10;'''
  column_order = ["DISK_READS","EXECUTIONS","READS_PER_EXEC","ALL_ELAPSED_TIME","LAST_TIME","SQL_ID","SQL_TEXT"]
  [metrics.column_alias]
    DISK_READS = "磁盘读取次数"
    EXECUTIONS = "执行次数"
    READS_PER_EXEC = "平均每次执行读取磁盘次数"
    ALL_ELAPSED_TIME = "总耗时（s）"
    LAST_TIME= "上次执行时间"
    SQL_ID = "SQL ID"
    SQL_TEXT = "SQL文本的前1000个字符"

[[metrics]]
  name = "yasdb_top_sql_by_parse_calls"
  name_alias = "磁盘解析次数 TOP10 SQL"
  module_name = "yasdb_check"
  default = true
  enabled = true
  sql = '''SELECT PARSE_CALLS, EXECUTIONS
        , round(PARSE_CALLS / EXECUTIONS, 2) AS CALLS_PER_EXEC
        , round(ELAPSED_TIME / 1000, 2) AS ALL_ELAPSED_TIME
        , to_char(LAST_ACTIVE_TIME, 'YYYY-MM-DD HH24:MI:SS') AS LAST_TIME, SQL_ID
        , SQL_TEXT
    FROM v$sqlarea
    WHERE EXECUTIONS > 0
    ORDER BY round(ELAPSED_TIME / 1000 / EXECUTIONS, 2) DESC
    LIMIT 10;'''
  column_order = ["DISK_READS","EXECUTIONS","CALLS_PER_EXEC","ALL_ELAPSED_TIME","LAST_TIME","SQL_ID","SQL_TEXT"]
  [metrics.column_alias]
    PARSE_CALLS = "解析的次数"
    EXECUTIONS = "执行次数"
    CALLS_PER_EXEC = "平均每次执行解析的次数"
    ALL_ELAPSED_TIME = "总耗时（s）"
    LAST_TIME= "上次执行时间"
    SQL_ID = "SQL ID"
    SQL_TEXT = "SQL文本的前1000个字符"

[[metrics]]
  name = "host_huge_page"
  name_alias = "标准大页"
  module_name = "yasdb_check"
  default = true
  enabled = true
  [metrics.column_alias]
    hugePageEnabled = "标准大页开启"

  [metrics.item_names]
    hugePageEnabled = "host_huge_page_enabled"

  [metrics.alert_rules]

    [[metrics.alert_rules.warning]]
      expression = "host_huge_page_enabled == 'FALSE'"
      description = "标准大页未开启"
      suggestion = "对于内存操作非常频繁的业务，开启标准大页可以提高性能"


[[metrics]]
  name = "host_swap_memory"
  name_alias = "Swap内存"
  module_name = "yasdb_check"
  default = true
  enabled = true
  [metrics.column_alias]
    swapMemoryEnabled = "Swap内存开启"

  [metrics.item_names]
    swapMemoryEnabled = "host_swap_memory_enabled"

  [metrics.alert_rules]

    [[metrics.alert_rules.warning]]
      expression = "host_swap_memory_enabled == 'TRUE'"
      description = "Swap内存开启"
      suggestion = "由于磁盘访问速度较慢，与物理内存相比，Swap内存的访问速度较低。当系统频繁地使用Swap时，会导致IO负载增加，从而可能引起性能下降。"


[[metrics]]
  name = "yasdb_table_lock_wait"
  name_alias = "锁等待"
  module_name = "yasdb_check"
  default = true
  enabled = true
  sql = "select count(*) as TABLE_LOCK_WAIT_COUNT from v$lock where REQUEST in ('TS','TX');"
  number_columns = ["TABLE_LOCK_WAIT_COUNT"]
  [metrics.column_alias]
    TABLE_LOCK_WAIT_COUNT = "表锁等待数量"

  [metrics.item_names]
    TABLE_LOCK_WAIT_COUNT = "table_lock_wait_count"

  [metrics.alert_rules]

    [[metrics.alert_rules.warning]]
      expression = "table_lock_wait_count > 0"
      description = "表锁等待数量"
      suggestion = "当前存在表锁阻塞，请检查"

[[metrics]]
  name = "yasdb_row_lock_wait"
  name_alias = "行锁等待"
  module_name = "yasdb_check"
  default = true
  enabled = true
  sql = "select count(*) as ROW_LOCK_WAIT_COUNT from v$lock where REQUEST in ('ROW');"
  number_columns = ["ROW_LOCK_WAIT_COUNT"]
  [metrics.column_alias]
    ROW_LOCK_WAIT_COUNT = "行锁等待数量"

  [metrics.item_names]
    ROW_LOCK_WAIT_COUNT = "row_lock_wait_count"

  [metrics.alert_rules]

    [[metrics.alert_rules.warning]]
      expression = "row_lock_wait_count > 0"
      description = "行锁等待"
      suggestion = "当前存在行锁阻塞，请检查"

[[metrics]]
  name = "yasdb_long_running_transaction"
  name_alias = "长事务"
  module_name = "yasdb_check"
  default = true
  enabled = true
  sql = "select t.XID, to_char(t.START_DATE, 'yyyy-mm-dd hh24:mi:ss') as START_DATE, t.STATUS , t.RESIDUAL, s.USERNAME, t.SID, t.USED_UBLK from v$transaction t, v$session s where t.START_DATE < sysdate - 3 / 24 and t.SID = s.SID;"
  column_order = ["XID","START_DATE","STATUS","RESIDUAL","USERNAME","SID","USED_UBLK"]
  number_columns = ["XID"]
  labels = ["XID"]
  [metrics.column_alias]
    XID = "事务全局ID"
    START_DATE = "事务开始时间"
    STATUS = "事务状态"
    RESIDUAL = "事务是否在后台线程等待回滚"

    USERNAME = "所属用户"
    SID = "该事务绑定的会话ID"
    USED_UBLK = "事务使用的 UNDO Block 数量"

  [metrics.item_names]
    XID = "long_running_transaction_xid"

  [metrics.alert_rules]

    [[metrics.alert_rules.warning]]
      expression = "long_running_transaction_xid != 0"
      description = "长事务的全局ID"
      suggestion = "当前存在超过3个小时的长事务，长事务可能降低数据库并发能力"

[[metrics]]
  name = "yasdb_object_count"
  name_alias = "对象总数"
  module_name = "object_check"
  metric_type = "sql"
  default = true
  enabled = true
  sql = "select count(*) as total_count from dba_objects;"
  [metrics.column_alias]
    TOTAL_COUNT = "对象总数"

[[metrics]]
  name = "yasdb_object_owner"
  name_alias = "各owner对象统计"
  module_name = "object_check"
  metric_type = "sql"
  default = true
  enabled = true
  column_order = ["OWNER","OBJECT_TYPE","OWNER_OBJECT_COUNT"]
  sql = "SELECT owner, object_type, COUNT(*) AS owner_object_count FROM dba_objects WHERE owner NOT IN ('SYS', 'SYSTEM') AND object_type NOT LIKE 'BIN$%' GROUP BY owner, object_type ORDER BY owner,object_type;"
  [metrics.column_alias]
    OWNER = "owner名称"
    OBJECT_TYPE = "对象类型"
    OWNER_OBJECT_COUNT = "owner拥有对象数"

[[metrics]]
  name = "yasdb_object_tablespace"
  name_alias = "各tablespace对象统计"
  module_name = "object_check"
  metric_type = "sql"
  default = true
  enabled = true
  column_order = ["TABLESPACE_NAME","TABLESPACE_OBJECT_COUNT"]
  sql = "SELECT tablespace_name, COUNT(*) AS tablespace_object_count FROM dba_segments WHERE segment_type IN ('TABLE', 'INDEX', 'VIEW', 'SEQUENCE') GROUP BY tablespace_name ORDER BY tablespace_name;"
  [metrics.column_alias]
    TABLESPACE_NAME = "表空间名称"
    TABLESPACE_OBJECT_COUNT = "表空间拥有对象数"

[[metrics]]
  name = "yasdb_invalid_object"
  name_alias = "失效对象列表"
  module_name = "object_check"
  default = true
  enabled = true
  sql = "select OBJECT_ID, OWNER, OBJECT_NAME, OBJECT_TYPE, STATUS from dba_objects where STATUS = 'INVALID';"
  column_order = ["OWNER","OBJECT_NAME","OBJECT_TYPE","STATUS"]
  number_columns = ["OBJECT_ID"]
  labels = ["OWNER", "OBJECT_ID", "OBJECT_NAME"]
  [metrics.column_alias]
    OBJECT_ID = "对象ID"
    OWNER = "对象所属用户"
    OBJECT_NAME = "对象名称"
    OBJECT_TYPE = "对象类型"
    STATUS = "对象状态"

  [metrics.item_names]
    OBJECT_ID = "invalid_object_id"

  [metrics.alert_rules]

    [[metrics.alert_rules.warning]]
      expression = "invalid_object_id != 0"
      description = "失效对象ID"
      suggestion = "当前存在失效对象，可能影响业务运行"

[[metrics]]
  name = "yasdb_invisible_index"
  name_alias = "不可见索引列表"
  module_name = "object_check"
  default = true
  enabled = true
  sql = "select OWNER,INDEX_NAME,VISIBILITY from dba_indexes where VISIBILITY !='VISIBLE';"
  column_order = ["OWNER","INDEX_NAME","VISIBILITY"]
  labels = ["OWNER", "INDEX_NAME"]
  [metrics.column_alias]
    OWNER = "索引所属用户"
    INDEX_NAME = "索引名称"
    VISIBILITY = "索引可见性"

  [metrics.item_names]
    INDEX_NAME = "invisible_index_name"

  [metrics.alert_rules]

    [[metrics.alert_rules.info]]
      expression = "invisible_index_name != ''"
      description = "不可见索引名称"
      suggestion = "当前存在不可见索引，需检查判断是否需要该对象"

[[metrics]]
  name = "yasdb_disabled_constraint"
  name_alias = "不可用约束列表"
  module_name = "object_check"
  default = true
  enabled = true
  sql = "select OWNER,CONSTRAINT_NAME,CONSTRAINT_TYPE,STATUS from dba_constraints where STATUS ='DISABLED';"
  column_order = ["OWNER","CONSTRAINT_NAME","STATUS"]
  labels = ["OWNER", "CONSTRAINT_NAME"]
  [metrics.column_alias]
    OWNER = "约束所属用户"
    CONSTRAINT_NAME = "约束名称"
    CONSTRAINT_TYPE = "约束类型"
    STATUS = "约束状态"

  [metrics.item_names]
    CONSTRAINT_NAME = "disabled_constraint_name"

  [metrics.alert_rules]

    [[metrics.alert_rules.info]]
      expression = "disabled_constraint_name != ''"
      description = "不可用约束名称"
      suggestion = "当前存在不可用约束，请检查"

[[metrics]]
  name = "yasdb_table_with_too_much_columns"
  name_alias = "字段过多的表"
  module_name = "object_check"
  default = true
  enabled = true
  sql = "select OWNER,TABLE_NAME,count(*) as COLUMN_COUNT from dba_tab_cols group by OWNER,TABLE_NAME having count(*)>80;"
  column_order = ["OWNER","TABLE_NAME","COLUMN_COUNT"]
  labels = ["OWNER", "TABLE_NAME"]
  [metrics.column_alias]
    OWNER = "表所属用户"
    TABLE_NAME = "表名称"
    COLUMN_COUNT = "字段的数量"

  [metrics.item_names]
    COLUMN_COUNT = "table_column_count"

  [metrics.alert_rules]

    [[metrics.alert_rules.waring]]
      expression = "table_column_count > 80"
      description = "表的字段数量"
      suggestion = "该表字段过多，容易存在冗余数据，可重新检查该表字段设计"

[[metrics]]
  name = "yasdb_table_with_too_much_indexes"
  name_alias = "索引过多的表"
  module_name = "object_check"
  default = true
  enabled = true
  sql = "select TABLE_OWNER,TABLE_NAME,count(*) as INDEX_COUNT from dba_indexes group by TABLE_OWNER,TABLE_NAME having count(*) >8;"
  column_order = ["TABLE_OWNER","TABLE_NAME","INDEX_COUNT"]
  labels = ["TABLE_OWNER", "TABLE_NAME"]
  [metrics.column_alias]
    TABLE_OWNER = "表所属用户"
    TABLE_NAME = "表名称"
    INDEX_COUNT = "索引的数量"

  [metrics.item_names]
    INDEX_COUNT = "table_index_count"

  [metrics.alert_rules]

    [[metrics.alert_rules.waring]]
      expression = "table_index_count > 8"
      description = "表的字段数量"
      suggestion = "该表超过8个索引，可能影响数据插入效率"

[[metrics]]
  name = "yasdb_partitioned_table_without_partitioned_indexes"
  name_alias = "没有分区索引的分区表"
  module_name = "object_check"
  default = true
  enabled = true
  sql = '''SELECT b.OWNER ,b.name,a.PARTITIONING_TYPE ,b.tab_cols
    from
    (SELECT owner,TABLE_NAME,PARTITIONING_TYPE FROM DBA_PART_TABLES) a,
    (SELECT OWNER ,NAME ,LISTAGG(COLUMN_NAME,',') WITHIN group(ORDER BY COLUMN_POSITION) AS tab_cols FROM DBA_PART_KEY_COLUMNS WHERE OBJECT_TYPE ='TABLE' GROUP BY OWNER ,NAME ) b
    WHERE a.OWNER = b.owner AND a.TABLE_NAME =b.name AND a.owner<>'SYS'
    minus
    (
    WITH t1 AS
    (
    SELECT b.OWNER ,b.name,a.PARTITIONING_TYPE ,b.tab_cols
    from
    (SELECT owner,TABLE_NAME,PARTITIONING_TYPE FROM DBA_PART_TABLES) a,
    (SELECT OWNER ,NAME ,LISTAGG(COLUMN_NAME,',') WITHIN group(ORDER BY COLUMN_POSITION) AS tab_cols FROM DBA_PART_KEY_COLUMNS WHERE OBJECT_TYPE ='TABLE' GROUP BY OWNER ,NAME ) b
    WHERE a.OWNER = b.owner AND a.TABLE_NAME =b.name
    ),
    t2 AS
    (
    SELECT t2.INDEX_OWNER ,t2.INDEX_NAME,t2.TABLE_OWNER ,t2.TABLE_NAME,t2.ind_cols
    FROM
    (SELECT OWNER ,INDEX_NAME ,TABLE_OWNER ,TABLE_NAME FROM DBA_INDEXES WHERE PARTITIONED ='Y') t1,
    (SELECT INDEX_OWNER ,INDEX_NAME,TABLE_OWNER ,TABLE_NAME,LISTAGG(COLUMN_NAME,',') WITHIN group(ORDER BY COLUMN_POSITION) AS ind_cols
    FROM DBA_IND_COLUMNS WHERE INDEX_OWNER <>'SYS1' GROUP BY INDEX_OWNER ,INDEX_NAME,TABLE_OWNER ,TABLE_NAME) t2
    WHERE t1.OWNER=t2.INDEX_OWNER AND t1.INDEX_NAME=t2.INDEX_NAME AND t1.TABLE_OWNER=t2.TABLE_OWNER AND t1.TABLE_NAME=t2.TABLE_NAME
    )
    SELECT t1.OWNER ,t1.name,t1.PARTITIONING_TYPE ,t1.tab_cols
    FROM t1,t2
    WHERE t1.OWNER=t2.TABLE_OWNER AND t1.name=t2.TABLE_NAME AND t1.tab_cols=t2.ind_cols
    );'''
  column_order = ["OWNER","NAME","PARTITIONING_TYPE","TAB_COLS"]
  labels = ["OWNER", "NAME"]
  [metrics.column_alias]
    OWNER = "表所属用户"
    NAME = "表名称"
    PARTITIONING_TYPE = "分区类型"
    TAB_COLS = "分区键的列"

  [metrics.item_names]
    NAME = "partitioned_table_name_without_partitioned_indexes"

  [metrics.alert_rules]

    [[metrics.alert_rules.waring]]
      expression = "partitioned_table_name_without_partitioned_indexes != ''"
      description = "没有分区索引的分区表"
      suggestion = "该分区表无分区索引，在数据量过大的前提下，等值匹配可能成本较高，建议为较大的分区表创建对应索引。"

[[metrics]]
  name = "yasdb_table_with_row_size_exceeds_block_size"
  name_alias = "行大小超过块大小的表"
  module_name = "object_check"
  default = true
  enabled = true
  sql = '''SELECT a.OWNER, a.TABLE_NAME
    FROM (
        SELECT OWNER, TABLE_NAME, SUM(DATA_LENGTH) AS MAX_DL
        FROM DBA_TAB_COLUMNS
        WHERE  OWNER <> 'SYS' AND DATA_TYPE NOT LIKE '%LOB'
        GROUP BY OWNER, TABLE_NAME
    ) a, (
        SELECT to_number(decode(value, '8K','8192','16K','16384','32K','32768',value)) as VALUE 
        FROM v$parameter 
        WHERE NAME = 'DB_BLOCK_SIZE'
        ) b
    WHERE a.max_dl > b.value;'''
  labels = ["OWNER", "TABLE_NAME"]
  [metrics.column_alias]
    OWNER = "表所属用户"
    TABLE_NAME = "表名称"

  [metrics.item_names]
    TABLE_NAME = "name_of_table_with_row_size_exceeds_block_size"

  [metrics.alert_rules]

    [[metrics.alert_rules.waring]]
      expression = "name_of_table_with_row_size_exceeds_block_size != ''"
      description = "符合条件的表的名称"
      suggestion = "当表的行大小大于数据库或表空间的块大小时，则每行需要两个IOs，建议使用更大的数据块来存储该表。您可能需要增加数据库块大小(重组练习)或将表移动到块大小更大的表空间(重新定位)。"

[[metrics]]
  name = "yasdb_partitioned_table_with_number_of_hash_partitions_is_not_a_power_of_two"
  name_alias = "哈希分区数量不是2的幂的分区表"
  module_name = "object_check"
  default = true
  enabled = true
  sql = "select OWNER,TABLE_NAME,PARTITIONING_TYPE,PARTITION_COUNT from dba_part_tables where PARTITIONING_TYPE ='HASH' and abs(floor(log(2, PARTITION_COUNT)))!=log(2, PARTITION_COUNT) or log(2, PARTITION_COUNT)='Nan';"
  column_order = ["OWNER", "TABLE_NAME","PARTITIONING_TYPE","PARTITION_COUNT"]
  labels = ["OWNER", "TABLE_NAME"]
  [metrics.column_alias]
    OWNER = "表所属用户"
    TABLE_NAME = "表名称"
    PARTITIONING_TYPE = "分区类型"
    PARTITION_COUNT = "分区个数"

  [metrics.item_names]
    TABLE_NAME = "name_of_partitioned_table_with_number_of_hash_partitions_is_not_a_power_of_two"

  [metrics.alert_rules]

    [[metrics.alert_rules.waring]]
      expression = "name_of_partitioned_table_with_number_of_hash_partitions_is_not_a_power_of_two != ''"
      description = "符合条件的表的名称"
      suggestion = "存在哈希分区数量不是2的幂的分区表，可能会导致数据分布不均匀、哈希碰撞、数据倾斜等问题，同时也会增加维护的复杂性。在设计哈希分区时，最好遵循2的幂次方的规则，以获得更好的性能和管理效果。"

[[metrics]]
  name = "yasdb_foreign_keys_with_implicit_data_type_conversion"
  name_alias = "数据类型隐式转换的外键"
  module_name = "object_check"
  metric_type = "sql"
  default = true
  enabled = true
  sql = '''WITH t1 AS
    (SELECT b.OWNER ,b.CONSTRAINT_NAME ,b.TABLE_NAME ,b.COLUMN_NAME AS CHD_COL,b.posi,c.DATA_TYPE AS CHD_TYP FROM
    (SELECT OWNER ,CONSTRAINT_NAME ,TABLE_NAME FROM DBA_CONSTRAINTS WHERE CONSTRAINT_TYPE ='R') a,
    (SELECT b.OWNER ,b.CONSTRAINT_NAME ,b.TABLE_NAME ,b.COLUMN_NAME ,b."POSITION" AS posi FROM DBA_CONS_COLUMNS b) b ,
    (SELECT OWNER ,TABLE_NAME ,COLUMN_NAME ,DATA_TYPE FROM DBA_TAB_COLUMNS) c
    WHERE a.owner=b.OWNER AND a.CONSTRAINT_NAME=b.CONSTRAINT_NAME AND a.table_name=b.TABLE_NAME AND
    b.OWNER =c.OWNER AND b.TABLE_NAME =c.TABLE_NAME AND b.COLUMN_NAME =c.COLUMN_NAME ),
    t2 AS
    (SELECT distinct A.FK_OWNER,A.FK_CON_NAME,A.CHD_TAB,B.PRT_OWNER,B.PRT_CON_NAME,B.PRT_TAB,B.COLUMN_NAME AS PRT_COL,C.DATA_TYPE AS PRT_TYP,B.posi FROM
    (SELECT OWNER AS FK_OWNER, CONSTRAINT_NAME AS FK_CON_NAME,TABLE_NAME AS CHD_TAB,R_OWNER ,R_CONSTRAINT_NAME FROM DBA_CONSTRAINTS WHERE CONSTRAINT_TYPE ='R' ) a,
    (SELECT owner AS PRT_OWNER, CONSTRAINT_NAME AS PRT_CON_NAME, TABLE_NAME AS PRT_TAB,COLUMN_NAME,"POSITION" AS posi FROM DBA_CONS_COLUMNS) b,
    (SELECT OWNER ,TABLE_NAME ,COLUMN_NAME ,DATA_TYPE FROM DBA_TAB_COLUMNS) c
    WHERE a.R_OWNER=b.PRT_OWNER AND a.R_CONSTRAINT_NAME=b.PRT_CON_NAME AND
    B.PRT_OWNER = c.OWNER AND B.PRT_TAB=C.TABLE_NAME AND B.COLUMN_NAME=C.COLUMN_NAME)
    SELECT t2.FK_OWNER,t2.FK_CON_NAME,t2.CHD_TAB,t1.CHD_COL,t1.CHD_TYP,t2.PRT_OWNER,t2.PRT_CON_NAME,t2.PRT_TAB,t2.PRT_COL,T2.PRT_TYP
    FROM t1,t2
    WHERE t1.OWNER=t2.FK_OWNER AND t1.CONSTRAINT_NAME=t2.FK_CON_NAME AND t1.TABLE_NAME=t2.CHD_TAB AND t1.posi=t2.posi AND t1.CHD_TYP<>t2.PRT_TYP;'''
  column_order = ["FK_OWNER", "FK_CON_NAME","CHD_TAB","CHD_COL","CHD_TYP","PRT_OWNER","PRT_CON_NAME","PRT_TAB","PRT_COL","PRT_TYP"]
  labels = ["FK_OWNER", "FK_CON_NAME"]
  [metrics.column_alias]
    FK_OWNER = "外键所属用户"
    FK_CON_NAME = "外键约束名称"
    CHD_TAB = "子表名称"
    CHD_COL = "子表列名"
    CHD_TYP = "子表列的数据类型"
    PRT_OWNER = "父表所属用户"
    PRT_CON_NAME = "父表约束名称"
    PRT_TAB = "父表名称"
    PRT_COL = "父表列名"
    PRT_TYP = "父表列的数据类型"

  [metrics.item_names]
    FK_CON_NAME = "foreign_keys_with_implicit_data_type_conversion"

  [metrics.alert_rules]

    [[metrics.alert_rules.waring]]
      expression = "foreign_keys_with_implicit_data_type_conversion != ''"
      description = "符合条件的外键名称"
      suggestion = "当您连接父表(使用PK)和子表(使用FK)时，如果数据类型和/或长度不相同，性能将受到影响。虽然允许pk和fk不匹配本质上是一个关系设计错误，但它会工作的。但是优化器需要向解释计划中添加执行隐式数据类型转换的步骤——这意味着可能不会使用索引。当外键列存在隐式转换时，把这两个列进行连接，则无法使用索引，这可能导致查询性能差，引起性能降低。"

[[metrics]]
  name = "yasdb_foreign_keys_without_indexes"
  name_alias = "无索引的子表外键"
  module_name = "object_check"
  metric_type = "sql"
  default = true
  enabled = true
  sql = '''WITH t1 AS 
    (SELECT fk_owner,CONSTRAINT_NAME,prt_owner,prt_tab,child_tab,LISTAGG(COLUMN_NAME,',') WITHIN group(ORDER BY posi) AS col_lst FROM
    (SELECT a.OWNER as fk_owner ,a.CONSTRAINT_NAME ,b.OWNER as prt_owner ,b.prt_tab,a.child_tab ,b.COLUMN_NAME ,b.posi FROM
    (SELECT OWNER,CONSTRAINT_NAME,R_OWNER ,R_CONSTRAINT_NAME ,TABLE_NAME as child_tab FROM DBA_CONSTRAINTS WHERE CONSTRAINT_TYPE ='R') a,
    (SELECT b.OWNER ,b.CONSTRAINT_NAME ,b.TABLE_NAME as prt_tab,b.COLUMN_NAME ,b."POSITION" AS posi FROM DBA_CONS_COLUMNS b) b
    WHERE a.R_CONSTRAINT_NAME=b.CONSTRAINT_NAME and a.R_OWNER=b.OWNER
    ) GROUP BY fk_owner,CONSTRAINT_NAME,prt_owner,prt_tab,child_tab),
    t2 AS
    (SELECT INDEX_OWNER ,INDEX_NAME,TABLE_OWNER ,TABLE_NAME,LISTAGG(COLUMN_NAME,',') WITHIN group(ORDER BY COLUMN_POSITION) AS ind_lst
    FROM DBA_IND_COLUMNS GROUP BY INDEX_OWNER ,INDEX_NAME,TABLE_OWNER ,TABLE_NAME)
    SELECT DISTINCT t1.prt_owner||'.'||t1.prt_tab as parent_tab,t1.CONSTRAINT_NAME,t1.fk_owner||'.'||t1.child_tab as child_tab,t1.col_lst FROM t1 left join t2
    on t1.FK_OWNER = t2.TABLE_OWNER AND t1.child_tab = t2.TABLE_NAME AND t1.col_lst = t2.ind_lst where t2.TABLE_OWNER is null and t1.FK_OWNER<>'SYS';'''
  column_order = ["PARENT_TAB", "CHILD_TAB","CONSTRAINT_NAME","COL_LST"]
  labels = ["PARENT_TAB", "CHILD_TAB"]
  [metrics.column_alias]
    PARENT_TAB = "父表"
    CHILD_TAB = "子表"
    CONSTRAINT_NAME = "约束名称"
    COL_LST = "相关列"

  [metrics.item_names]
    CONSTRAINT_NAME = "foreign_keys_without_indexes"

  [metrics.alert_rules]

    [[metrics.alert_rules.waring]]
      expression = "foreign_keys_without_indexes != ''"
      description = "符合条件的外键名称"
      suggestion = "当子表在外键上没有索引时，该子表上的某些DML操作将需要在父表上的某个级别上加锁，这可能会从根本上降低性能。"

[[metrics]]
  name = "yasdb_index_blevel"
  name_alias = "超过三层的索引"
  module_name = "object_check"
  metric_type = "sql"
  default = true
  enabled = true
  sql = "select OWNER, INDEX_NAME, BLEVEL from dba_indexes where BLEVEL>3;"
  column_order = ["INDEX_NAME","OWNER","BLEVEL"]
  [metrics.column_alias]
    OWNER = "索引用户"
    INDEX_NAME = "索引名称"
    BLEVEL = "BTree高度"


[[metrics]]
  name = "yasdb_index_column"
  name_alias = "字段过多的索引"
  module_name = "object_check"
  metric_type = "sql"
  default = true
  enabled = true
  sql = "select INDEX_OWNER, INDEX_NAME, count(*) as column_count from dba_ind_columns group by INDEX_OWNER,INDEX_NAME having count(*) > 10;"
  column_order = ["INDEX_NAME","INDEX_OWNER","COLUMN_COUNT"]
  [metrics.column_alias]
    INDEX_OWNER = "索引用户"
    INDEX_NAME = "索引名称"
    COLUMN_COUNT = "字段数量"

[[metrics]]
  name = "yasdb_index_invisible"
  name_alias = "不可见索引"
  module_name = "object_check"
  metric_type = "sql"
  default = true
  enabled = true
  sql = "select OWNER, INDEX_NAME, TABLE_OWNER, TABLE_NAME FROM dba_indexes where owner<> 'SYS' and VISIBILITY <> 'VISIBLE';"
  column_order = ["INDEX_NAME","OWNER","TABLE_NAME","TABLE_OWNER"]
  [metrics.column_alias]
    OWNER = "索引用户"
    INDEX_NAME = "索引名称"
    TABLE_OWNER = "表用户"
    TABLE_NAME = "表名"
    
[[metrics]]
  name = "yasdb_index_oversized"
  name_alias = "过大的索引"
  module_name = "object_check"
  metric_type = "sql"
  default = true
  enabled = true
  sql = "SELECT ind.OWNER AS ind_owner,ind.SEGMENT_NAME AS ind_name,ind.SEGMENT_TYPE as IND_SEGMENT_TYPE ,tab.SEGMENT_TYPE as TAB_SEGMENT_TYPE,tab.OWNER AS tab_owner ,tab.SEGMENT_NAME AS tab_name,ind.BYTES AS ind_bytes,tab.BYTES AS tab_bytes FROM DBA_SEGMENTS ind,DBA_SEGMENTS tab,DBA_INDEXES di WHERE IND.SEGMENT_TYPE IN ('INDEX','INDEX PARTITION') AND tab.SEGMENT_TYPE IN ('TABLE','TABLE PARTITION') AND ind.OWNER =di.OWNER AND ind.SEGMENT_NAME =di.INDEX_NAME AND tab.OWNER =di.TABLE_OWNER AND tab.SEGMENT_NAME =di.TABLE_NAME AND ind.BYTES > tab.BYTES;"
  number_columns = ["IND_BYTES","TAB_BYTES"]
  labels = ["IND_NAME"]
  column_order = ["IND_NAME","IND_OWNER","IND_SEGMENT_TYPE","IND_BYTES","TAB_NAME","TAB_OWNER","TAB_SEGMENT_TYPE","TAB_BYTES"]
  [metrics.column_alias]
    IND_OWNER = "索引用户"
    TAB_OWNER = "表用户"
    IND_NAME = "索引名称"
    TAB_NAME = "表名称"
    TAB_SEGMENT_TYPE = "表段类型"
    IND_SEGMENT_TYPE = "索引段类型"
    IND_BYTES = "索引大小(字节)"
    TAB_BYTES = "表大小(字节)"
  [metrics.item_names]
    IND_BYTES = "yasdb_index_bytes"
    TAB_BYTES = "yasdb_table_bytes"
  [metrics.alert_rules]

    [[metrics.alert_rules.warning]]
      expression = "yasdb_index_bytes>yasdb_table_bytes"
      description = "存在索引过大的情况"
      suggestion = "存在索引过大的情况，需审视是否需要该索引，或者是否该索引碎片过多"

[[metrics]]
  name = "yasdb_index_table_index_not_together"
  name_alias = "表和索引不在一个schema下"
  module_name = "object_check"
  metric_type = "sql"
  default = true
  enabled = true
  sql = "SELECT OWNER,INDEX_NAME ,TABLE_OWNER ,TABLE_NAME FROM dba_indexes WHERE OWNER <> TABLE_OWNER;"
  labels = ["INDEX_NAME"]
  column_order = ["INDEX_NAME","OWNER","TAB_NAME","TAB_OWNER"]
  [metrics.column_alias]
    OWNER = "索引用户"
    INDEX_NAME = "索引名称"
    TABLE_OWNER = "表用户"
    TABLE_NAME = "表名称"
  [metrics.item_names]
    OWNER = "yasdb_index_owner"
    TABLE_OWNER = "yasdb_table_owner"
  [metrics.alert_rules]

    [[metrics.alert_rules.warning]]
      expression = "yasdb_index_owner != yasdb_table_owner"
      description = "索引大小大于表大小"
      suggestion = "表和索引的属主不同，可能带来维护上的不必要的额外步骤，建议评估后重建索引。"

[[metrics]]
  name = "yasdb_sequence_no_available"
  name_alias = "无可用值的序列"
  module_name = "object_check"
  metric_type = "sql"
  default = true
  enabled = true
  sql = "SELECT SEQUENCE_OWNER ,SEQUENCE_NAME ,LAST_NUMBER / MAX_VALUE * 100 as USED_RATE FROM DBA_SEQUENCES ds WHERE LAST_NUMBER / MAX_VALUE > 7/10;"
  number_columns = ["USED_RATE"]
  [metrics.column_alias]
    SEQUENCE_OWNER = "序列用户"
    SEQUENCE_NAME = "序列名称"
    USED_RATE = "使用率(%)"
  [metrics.item_names]
    USED_RATE = "yasdb_sequence_used_rate"
  [metrics.alert_rules]

    [[metrics.alert_rules.warning]]
      expression = "yasdb_sequence_used_rate >= 80 && yasdb_sequence_used_rate <=100"
      description = "序列使用率"
      suggestion = "序列不可用，可能导致业务阻塞无法运行"

[[metrics]]
  name = "yasdb_task_running"
  name_alias = "运行中的任务"
  module_name = "object_check"
  metric_type = "sql"
  default = true
  enabled = true
  sql = "select OWNER ,JOB_NAME ,JOB_STYLE ,JOB_CREATOR ,JOB_ACTION  from DBA_SCHEDULER_JOBS where STATE='RUNNING';"
  number_columns = ["USED_RATE"]
  column_order = ["JOB_NAME","OWNER","JOB_STYLE","JOB_CREATOR","JOB_ACTION"]
  [metrics.column_alias]
    OWNER = "JOB的所有者"
    JOB_NAME = "JOB名称"
    JOB_STYLE = "JOB类型"
    JOB_CREATOR = "创建JOB的用户名"
    JOB_ACTION = "JOB执行的动作"

[[metrics]]
  name = "yasdb_package_no_package_package_body"
  name_alias = "没有package的package body"
  module_name = "object_check"
  metric_type = "sql"
  default = true
  enabled = true
  sql = "SELECT OWNER ,NAME, JOIN_STR FROM (SELECT  OWNER ,NAME,LISTAGG(TYPE,'-') AS JOIN_STR FROM DBA_SOURCE GROUP by OWNER ,NAME) WHERE JOIN_STR<>'PACKAGE-PACKAGE BODY';"
  number_columns = ["USED_RATE"]
  labels = ["NAME"]
  column_order = ["NAME","OWNER","JOIN_STR"]
  [metrics.column_alias]
    OWNER = "对象所属的用户"
    NAME = "对象名称"
    JOIN_STR = "对象类型连接字符串"
  [metrics.item_names]
    JOIN_STR = "yasdb_package_type_join"
  [metrics.alert_rules]
    [[metrics.alert_rules.warning]]
      expression = "yasdb_package_type_join != 'PACKAGE-PACKAGE BODY'"
      description = "存在没有package的package body"
      suggestion = "建议使用package以充分利用其封装、组织和优化代码的特性。"

[[metrics]]
  name = "yasdb_security_password_strength"
  name_alias = "密码强度"
  module_name = "security_check"
  metric_type = "sql"
  default = true
  enabled = true
  sql = "SELECT VALUE FROM x$parameter WHERE name ='_CHECK_PASSWORD_COMPLEXITY';"
  [metrics.column_alias]
    VALUE = "密码强度控制"
  [metrics.item_names]
    VALUE = "yasdb_password_strength_complexity"
  [metrics.alert_rules]

    [[metrics.alert_rules.warning]]
      expression = "yasdb_password_strength_complexity == 'FALSE'"
      description = "未开启密码强度控制"
      suggestion = "建议打开此项参数，防止普通用户使用弱密码"

[[metrics]]
  name = "yasdb_security_maximum_login_attempts"
  name_alias = "未限制登录次数的Profile"
  module_name = "security_check"
  metric_type = "sql"
  default = true
  enabled = true
  sql = "select PROFILE,RESOURCE_NAME ,RESOURCE_TYPE, LIMIT from DBA_PROFILES where PROFILE<>'DEFAULT' and RESOURCE_NAME='FAILED_LOGIN_ATTEMPTS' and LIMIT='UNLIMITED';"
  labels = ["PROFILE"]
  [metrics.column_alias]
    PROFILE = "PROFILE名称"
    RESOURCE_NAME = "资源名称"
    RESOURCE_TYPE = "密码强度控制"
    LIMIT = "限制"
  [metrics.item_names]
    LIMIT = "yasdb_maximum_login_limit"
  [metrics.alert_rules]

    [[metrics.alert_rules.warning]]
      expression = "yasdb_maximum_login_limit == 'UNLIMITED'"
      description = "未限制用户登录尝试次数"
      suggestion = "建议限制用户尝试登录次数，防止暴力破解密码（应用系统账户谨慎设置尝试登录次数）"

[[metrics]]
  name = "yasdb_security_user_no_open"
  name_alias = "非OPEN状态的用户"
  module_name = "security_check"
  metric_type = "sql"
  default = true
  enabled = true
  sql = "select username,ACCOUNT_STATUS from dba_users where ACCOUNT_STATUS!='OPEN';"
  [metrics.column_alias]
    USERNAME = "用户名称"
    ACCOUNT_STATUS = "账户状态"
  [metrics.item_names]
    ACCOUNT_STATUS = "yasdb_user_account_status"
  [metrics.alert_rules]

    [[metrics.alert_rules.warning]]
      expression = "yasdb_user_account_status != 'OPEN'"
      description = "存在非OPEN状态的用户"
      suggestion = "如应用账户被锁定，应及时解锁。"

[[metrics]]
  name = "yasdb_security_user_with_system_table_privileges"
  name_alias = "拥有系统表权限的用户"
  module_name = "security_check"
  metric_type = "sql"
  default = true
  enabled = true
  labels = ["TABLE_NAME"]
  sql = "select GRANTEE , TABLE_NAME from DBA_TAB_PRIVS where OWNER='SYS' and TYPE='TABLE' and GRANTEE in (select username from dba_users);"
  [metrics.column_alias]
    GRANTEE = "被授权者名"
    TABLE_NAME = "表名称"
  [metrics.item_names]
    GRANTEE = "yasdb_user_with_system_table"
  [metrics.alert_rules]

    [[metrics.alert_rules.warning]]
      expression = "yasdb_user_with_system_table != 'SYS'"
      description = "非SYS用户拥有系统表权限"
      suggestion = "普通用户拥有SYS下对象的权限，这会增加普通用户破坏整个数据库的风险"

[[metrics]]
  name = "yasdb_security_user_with_dba_role"
  name_alias = "所有DBA角色的用户"
  module_name = "security_check"
  metric_type = "sql"
  default = true
  enabled = true
  sql = "select GRANTEE from dba_role_privs where GRANTED_ROLE='DBA';"
  labels = ["GRANTEE"]
  [metrics.column_alias]
    GRANTEE = "拥有DBA角色的用户"
  [metrics.item_names]
    GRANTEE = "yasdb_user_with_dba_role"
  [metrics.alert_rules] 

    [[metrics.alert_rules.warning]]
      expression = "yasdb_user_with_dba_role != 'SYS'"
      description = "非SYS用户拥有DBA角色"
      suggestion = "谨慎为普通用户授予管理数据库的DBA角色"

[[metrics]]
  name = "yasdb_security_user_all_privilege_or_system_privileges"
  name_alias = "拥有ALL PRIVILEGE|SYSTEM的用户"
  module_name = "security_check"
  metric_type = "sql"
  default = true
  enabled = true
  sql = "select GRANTEE from dba_sys_privs where PRIVILEGE='ALL PRIVILEGES' AND GRANTEE IN ( SELECT USERNAME FROM DBA_USERS);"
  labels = ["GRANTEE"]
  [metrics.column_alias]
    GRANTEE = "拥有ALL PRIVILEGE|SYSTEM的用户"
  [metrics.item_names]
    GRANTEE = "yasdb_user_all_privilege_or_system_privileges"
  [metrics.alert_rules]

    [[metrics.alert_rules.warning]]
      expression = "yasdb_user_all_privilege_or_system_privileges != 'SYS'"
      description = "非sys用户拥有ALL PRIVILEGE或者SYSTEM权限"
      suggestion = "谨慎为普通用户授予管理数据库的系统权限"

[[metrics]]
  name = "yasdb_security_user_use_system_tablespace"
  name_alias = "以SYSTEM表空间为默认表空间的用户"
  module_name = "security_check"
  metric_type = "sql"
  default = true
  enabled = true
  sql = "select username,default_tablespace from dba_users where default_tablespace = 'SYSTEM';"
  labels = ["DEFAULT_TABLESPACE"]
  [metrics.column_alias]
    USERNAME = "用户名称"
    DEFAULT_TABLESPACE = "默认表空间"
  [metrics.item_names]
    USERNAME = "yasdb_security_user_use_system_tablespace"
  [metrics.alert_rules]

    [[metrics.alert_rules.warning]]
      expression = "yasdb_security_user_use_system_tablespace{DEFAULT_TABLESPACE=='SYSTEM'} != 'SYS'"
      description = "除SYS外，存在以SYSTEM表空间为默认表空间的用户列表"
      suggestion = "系统表空间很重要，按道理只允许SYS使用，避免其他用户向SYSTEM表空间中写入数据，避免SYSTEM空间写满，影响数据库运行"

[[metrics]]
  name = "yasdb_security_audit_cleanup_task"
  name_alias = "审计定时清理任务详情"
  module_name = "security_check"
  metric_type = "sql"
  default = true
  enabled = true
  sql = "select AUDIT_JOB.COUNT AS AUDIT_JOB_CLEAN_JOB, AUDIT_CLEAN_TIME.COUNT AS AUDIT_CLEAN_TIME_COUNT , AUDIT_RECORD.COUNT AS AUDIT_RECORD_COUNT from (SELECT COUNT(*) AS COUNT FROM DBA_AUDIT_MGMT_CLEANUP_JOBS) AS AUDIT_JOB, (select count(*) AS COUNT from DBA_AUDIT_MGMT_LAST_ARCH_TS) AS AUDIT_CLEAN_TIME , (select count(*) AS COUNT from UNIFIED_AUDIT_TRAIL) AS AUDIT_RECORD;"
  number_columns = ["AUDIT_JOB_CLEAN_JOB","AUDIT_CLEAN_TIME_COUNT","AUDIT_RECORD_COUNT"]
  column_order = ["AUDIT_JOB_CLEAN_JOB","AUDIT_CLEAN_TIME_COUNT","AUDIT_RECORD_COUNT"]
  [metrics.column_alias]
    AUDIT_CLEANUP_COUNT = "审计日志清理次数"
    AUDIT_CLEAN_TIME_COUNT = "清理审计日志时间点数量"
    AUDIT_RECORD_COUNT = "审计日志数量"
    AUDIT_JOB_CLEAN_JOB = "审计清理任务"

  [metrics.item_names]
    AUDIT_CLEANUP_COUNT = "yasdb_audit_cleanup_task_count"
    AUDIT_CLEAN_TIME_COUNT = "yasdb_audit_cleanup_time_count"
    AUDIT_RECORD_COUNT = "yasdb_audit_record_count"
  [metrics.alert_rules]

    [[metrics.alert_rules.warning]]
      expression = "(yasdb_audit_cleanup_task_count == 0)||( yasdb_audit_cleanup_time_count == 0 ) || (yasdb_audit_record_count != 0)"
      description = "未定时清理审计日志"
      suggestion = "未定时清理审计日志，请添加审计清理任务"

[[metrics]]
  name = "yasdb_security_audit_file_size"
  name_alias = "审计文件大小"
  module_name = "security_check"
  metric_type = "sql"
  default = true
  enabled = true
  sql = "select segment_name ,round(bytes/1024/1024,3)  as size_mb from dba_segments where segment_name like '%AUD$%' and SEGMENT_TYPE = 'TABLE';"
  number_columns = ["SIZE_MB"]
  column_order = ["SEGMENT_NAME", "SIZE_MB"]
  [metrics.column_alias]
    SEGMENT_NAME = "段名称"
    SIZE_MB = "大小(MB)"


[[metrics]]
  name = "yasdb_database_change"
  name_alias = "数据库变更日志"
  module_name = "log_analysis"
  metric_type = "bash"
  default = true
  enabled = true

[[metrics]]
  name = "yasdb_redo_log"
  name_alias = "REDO日志分析"
  module_name = "log_analysis"
  metric_type = "sql"
  default = true
  enabled = true
  column_order = ["ID", "NAME", "STATUS", "SEQUENCE", "BLOCK_COUNT", "BLOCK_SIZE", "USED_BLOCKS"]
  sql = "select ID, NAME, STATUS, BLOCK_SIZE, BLOCK_COUNT, USED_BLOCKS, SEQUENCE# AS SEQUENCE from v$logfile;"
  [metrics.column_alias]
    ID = "ID"
    NAME = "日志文件名"
    STATUS = "状态"
    BLOCK_SIZE = "块大小"
    BLOCK_COUNT = "块数量"
    USED_BLOCKS = "已使用块数量"
    SEQUENCE = "序列号"

[[metrics]]
  name = "yasdb_redo_log_count"
  name_alias = "REDO日志数量分析"
  module_name = "log_analysis"
  metric_type = "sql"
  default = true
  enabled = true
  number_columns = ["TOTAL_COUNT", "CURRENT_COUNT", "ACTIVE_COUNT", "INACTIVE_COUNT"]
  column_order = ["TOTAL_COUNT","ACTIVE_COUNT","INACTIVE_COUNT","CURRENT_COUNT"]
  sql = "select count(*) as total_count, SUM(CASE WHEN STATUS = 'CURRENT' THEN 1 ELSE 0 END) AS current_count,SUM(CASE WHEN STATUS = 'ACTIVE' THEN 1 ELSE 0 END) AS active_count, SUM(CASE WHEN STATUS = 'INACTIVE' THEN 1 ELSE 0 END) AS inactive_count from v$logfile;"
  [metrics.column_alias]
    TOTAL_COUNT= "REDO日志文件总数"
    CURRENT_COUNT = "current状态日志文件数"
    ACTIVE_COUNT = "active状态日志文件数"
    INACTIVE_COUNT = "inactive状态日志文件数"
  [metrics.item_names]
    TOTAL_COUNT = "redo_total_count"
    CURRENT_COUNT = "redo_current_count"
    ACTIVE_COUNT = "redo_active_count"
    INACTIVE_COUNT = "redo_inactive_count"
  [metrics.alert_rules]

    [[metrics.alert_rules.info]]
      expression = "redo_active_count > 1"
      description = "redo追尾风险"
      suggestion = "存在redo追尾风险"

    [[metrics.alert_rules.warning]]
      expression = "redo_total_count < 4"
      description = "REDO日志组数量检查"
      suggestion = "REDO日志组数量过少，建议增加REDO日志组"

    [[metrics.alert_rules.critical]]
      expression = "(redo_current_count == 1) && (redo_active_count == redo_total_count - 1)"
      description = "redo追尾风险"
      suggestion = "存在redo追尾风险"

[[metrics]]
  name = "yasdb_undo_size"
  name_alias = "正在使用的UNDO空间大小"
  module_name = "log_analysis"
  metric_type = "sql"
  default = true
  enabled = true
  sql = "SELECT round(a.USED_UBLK * b.value /1024/1024,3)  AS SIZE_MB, XID from V$TRANSACTION as a ,(SELECT VALUE FROM V$PARAMETER WHERE NAME='DB_BLOCK_SIZE') AS B ;"
  number_columns = ["SIZE_MB","XID"]
  column_order = ["XID", "SIZE_MB"]
  labels = ["XID"]
  [metrics.column_alias]
    SIZE_MB= "正在使用的UNDO空间大小 (MB)"
  [metrics.item_names]
    SIZE_MB = "yasdb_current_using_undo_size"
  [metrics.alert_rules]

    [[metrics.alert_rules.warning]]
      expression = "yasdb_current_using_undo_size >= 10240 && yasdb_current_using_undo_size < 30720"
      description = "UNDO空间使用超过10G"
      suggestion = "TP型系统，单个事务使用的UNDO不易太大，回滚时可能会导致数据库hang住，会话使用的undo空间超过10GB，建议检查该会话并及时提交，谨慎进行回滚，回滚可能影响系统正常运行"

    [[metrics.alert_rules.critical]]
      expression = "yasdb_current_using_undo_size >= 30"
      description = "UNDO空间使用超过30G"
      suggestion = "TP型系统，单个事务使用的UNDO不易太大，回滚时可能会导致数据库hang住，会话使用的undo空间超过30GB，建议检查会话并及时提交。并需要修改应用，防止超限使用再次发生."

[[metrics]]
  name = "yasdb_total_undo_block"
  name_alias = "使用过多UNDO块"
  module_name = "log_analysis"
  metric_type = "sql"
  default = true
  enabled = true
  sql = "SELECT  SUM(USED_UBLK) as TOTAL_BLOCK from V$TRANSACTION ;"
  number_columns = ["TOTAL_BLOCK"]
  [metrics.column_alias]
    TOTAL_BLOCK= "正在使用的UNDO块数量"
  [metrics.item_names]
    TOTAL_BLOCK = "yasdb_total_undo_block"
  [metrics.alert_rules]

    [[metrics.alert_rules.warning]]
      expression = "yasdb_total_undo_block >= 20000 && yasdb_total_undo_block < 300000"
      description = "正在使用的undo块超过2w"
      suggestion = "请检查确认是否有大事务正在运行，需及时提交大事务，避免影响系统并发性能。"

    [[metrics.alert_rules.critical]]
      expression = "yasdb_total_undo_block >= 300000"
      description = "正在使用的undo块超过30w"
      suggestion = "请检查当前是否在运行批量数据修改业务。谨慎进行超大事务的回滚，回滚可能影响系统正常运行。"

[[metrics]]
  name = "yasdb_transactions"
  name_alias = "当前正在运行的事务及UNDO使用情况"
  module_name = "log_analysis"
  metric_type = "sql"
  default = true
  enabled = true
  sql = "SELECT XID, SID,XRMID,XEXT, XNODE,XSN,STATUS,RESIDUAL, USED_UBLK, FIRST_UBAFIL,FIRST_UBABLK,FIRST_UBAVER ,FIRST_UBAREC,LAST_UBAFIL,LAST_UBABLK, PTX_XID, START_DATE,ISOLATION_LEVEL from V$TRANSACTION ;"
  number_columns = ["XID","SID","XRMID","XEXT","XNODE","XSN","USED_UBLK","FIRST_UBAFIL","FIRST_UBABLK","FIRST_UBAVER","FIRST_UBAREC","LAST_UBAFIL","LAST_UBABLK","PTX_XID"]
  column_order = ["XID","SID","XRMID","XEXT","XNODE","XSN","USED_UBLK","FIRST_UBAFIL","FIRST_UBABLK","FIRST_UBAVER","FIRST_UBAREC","LAST_UBAFIL","LAST_UBABLK","PTX_XID"]  
  [metrics.column_alias]
    XID = "事务的全局ID"
    SID = "该事务绑定的会话ID"
    XRMID = "该事务的XRM ID"
    XEXT = "当前事务对应的事务区编号"
    XNODE = "当前事务在对应事务区内的编号"
    XSN = "当前事务的版本号"
    STATUS = "事务状态"
    RESIDUAL = "事务是否在后台线程等待回滚"
    USED_UBLK = "事务使用的undo block数量"
    FIRST_UBAFIL = "事务使用的第一个undo block文件号"
    FIRST_UBABLK = "事务使用的第一个undo block的ID"
    FIRST_UBAVER = "事务使用的第一个undo block版本号"
    FIRST_UBAREC = "事务开启后第一条undo记录的编号"
    LAST_UBAFIL = "事务的最后一个undo block文件号"
    LAST_UBABLK = "事务最后一个undo block的ID"
    PTX_XID = "父事务ID"
    START_DATE = "事务启动时间"
    ISOLATION_LEVEL = "隔离级别"

[[metrics]]
  name = "yasdb_run_log_error"
  name_alias = "run.log错误分析"
  module_name = "log_analysis"
  default = true
  enabled = true

[[metrics]]
  name = "yasdb_alert_log_error"
  name_alias = "alert.log错误分析"
  module_name = "log_analysis"
  default = true
  enabled = true

[[metrics]]
  name = "host_dmesg_log_error"
  name_alias = "内核错误分析"
  module_name = "log_analysis"
  default = true
  enabled = true

[[metrics]]
  name = "host_system_log_error"
  name_alias = "操作系统错误日志分析"
  module_name = "log_analysis"
  default = true
  enabled = true